{"version":3,"sources":["apis/handle.js","apis/request.js","apis/bars.js","redux/barSlice.js","components/AppInit.js","components/BarItem.js","components/ProgressBars.js","App.js","serviceWorker.js","redux/rootReducer.js","redux/store.js","index.js"],"names":["returnError","message","Error","parseResponse","response","status","statusText","data","e","handleError","error","Request","url","configs","axios","post","defaultConfigs","then","catch","get","timeout","defaultState","buttons","bars","limit","currentBarIndex","loading","barSlice","createSlice","name","initialState","reducers","showLoading","state","hideLoading","fetchBarDataDone","action","payload","changeActiveBar","barIndex","changeBarValue","point","newBarValue","actions","getBarData","dispatch","a","async","process","notification","console","log","connect","bar","useEffect","className","size","title","extra","type","key","style","width","onClick","BarItem","active","value","percent","Math","floor","backgroundClassName","classNames","textValueClassName","Option","Select","BarComponents","barOptions","forEach","index","push","PointButtons","map","onChangePoint","color","marginBottom","onChange","placeholder","marginRight","length","Boolean","window","location","hostname","match","rootReducer","combineReducers","barReducer","store","configureStore","reducer","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.db2ed637.chunk.js","sourcesContent":["const ERROR_MESSAGE = `API request failed.`;\n\nconst returnError = message => {\n  throw new Error(message);\n};\n\nexport const parseResponse = response => {\n  try {\n    const { status, statusText, data } = response;\n    if (status === 200) {\n      return data;\n    } else {\n      return returnError(statusText || ERROR_MESSAGE);\n    }\n  } catch (e) {\n    return returnError(ERROR_MESSAGE);\n  }\n};\n\nexport const handleError = error => {\n  try {\n    const { response } = error;\n    return returnError(response.data.message || ERROR_MESSAGE);\n  } catch (e) {\n    return returnError(ERROR_MESSAGE);\n  }\n};\n","import axios from 'axios';\n\nimport { parseResponse, handleError } from './handle';\n\nexport default class Request {\n  // Timeout request is 5s\n  static defaultConfigs = { timeout: 5000 };\n\n  static post(url, data, configs) {\n    return axios\n      .post(url, data, { ...Request.defaultConfigs, ...configs })\n      .then(parseResponse)\n      .catch(handleError);\n  }\n\n  static get(url, data, configs) {\n    return axios\n      .get(url, data, { ...Request.defaultConfigs, ...configs })\n      .then(parseResponse)\n      .catch(handleError);\n  }\n}\n","import Request from './request';\n\nconst END_POINT = process.env.REACT_APP_END_POINT;\n\nexport const getBars = () => {\n  return Request.get(`${END_POINT}/bars`);\n};\n","import { createSlice } from '@reduxjs/toolkit';\nimport { notification } from 'antd';\n\nimport { getBars } from '../apis/bars';\n\nconst defaultState = {\n  buttons: [],\n  bars: [],\n  limit: 9999,\n  currentBarIndex: 0,\n  loading: true,\n};\n\nconst barSlice = createSlice({\n  name: 'bar',\n  initialState: defaultState,\n  reducers: {\n    showLoading(state) {\n      state.loading = true;\n    },\n    hideLoading(state) {\n      state.loading = false;\n    },\n    fetchBarDataDone(state, action) {\n      const { buttons, bars, limit } = action.payload;\n\n      state.buttons = buttons || defaultState.buttons;\n      state.bars = bars || defaultState.bars;\n      state.limit = limit || defaultState.limit;\n    },\n    changeActiveBar(state, action) {\n      state.currentBarIndex = action.payload.barIndex;\n    },\n    changeBarValue(state, action) {\n      const { point } = action.payload;\n      const { currentBarIndex, bars } = state;\n      let newBarValue = bars[currentBarIndex] + point;\n\n      if (newBarValue < 0) newBarValue = 0;\n      state.bars[currentBarIndex] = newBarValue;\n    },\n  },\n});\n\nexport const {\n  changeActiveBar,\n  changeBarValue,\n  fetchBarDataDone,\n  showLoading,\n  hideLoading,\n} = barSlice.actions;\n\nexport const getBarData = () => async dispatch => {\n  try {\n    dispatch(showLoading());\n    const data = await getBars();\n    dispatch(hideLoading());\n    dispatch(fetchBarDataDone({ ...data }));\n  } catch (err) {\n    dispatch(hideLoading());\n    notification.error({ message: err.message });\n    console.log(err);\n  }\n};\n\nexport { defaultState };\nexport default barSlice.reducer;\n","import React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { Spin, Button, Result } from 'antd';\n\nimport { getBarData } from '../redux/barSlice';\n\nconst AppInit = ({ dispatch, loading }) => {\n  useEffect(() => {\n    dispatch(getBarData());\n  }, []);\n\n  const onRetry = () => {\n    dispatch(getBarData());\n  };\n\n  if (loading)\n    return (\n      <div className=\"appContainer\">\n        <Spin size=\"large\" />\n      </div>\n    );\n\n  return (\n    <div className=\"appDefaultContainer\">\n      <Result\n        status=\"warning\"\n        title=\"There are some problems with your connection.\"\n        extra={\n          <Button\n            type=\"primary\"\n            key=\"retry\"\n            style={{ width: 100 }}\n            onClick={onRetry}\n          >\n            Retry\n          </Button>\n        }\n      />\n    </div>\n  );\n};\n\nconst mapStateToProps = ({ bar }) => ({\n  loading: bar.loading,\n});\n\nexport default connect(mapStateToProps)(AppInit);\n","import React from 'react';\nimport classNames from 'classnames';\n\nconst BarItem = ({ active, limit, value }) => {\n  const percent = Math.floor((value / limit) * 100);\n  const width = percent < 100 ? percent : 100;\n\n  const backgroundClassName = classNames(\n    'barItemHighlight',\n    value > limit ? 'barItemLimit' : '',\n    active ? 'barItemActive' : 'barItemInactive',\n  );\n\n  const textValueClassName = classNames(\n    'barItemTextValue',\n    width < 55 ? 'barItemTextValueNegative' : '',\n  );\n\n  return (\n    <div className=\"barItem\">\n      <div className={backgroundClassName} style={{ width: `${width}%` }} />\n      <span className={textValueClassName}>{percent}%</span>\n    </div>\n  );\n};\n\nexport default BarItem;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Button, Select } from 'antd';\n\nimport BarItem from './BarItem';\nimport { changeBarValue, changeActiveBar } from '../redux/barSlice';\n\nconst { Option } = Select;\n\nconst ProgressBars = ({ dispatch, bars, limit, buttons, currentBarIndex }) => {\n  const onChangePoint = point => {\n    dispatch(changeBarValue({ point }));\n  };\n\n  const onChangeCurrentBar = barIndex => {\n    dispatch(changeActiveBar({ barIndex }));\n  };\n\n  const BarComponents = [];\n  const barOptions = [];\n  bars.forEach((bar, index) => {\n    BarComponents.push(\n      <BarItem active={currentBarIndex === index} limit={limit} value={bar} />,\n    );\n    barOptions.push(<Option value={index}>#progress {index}</Option>);\n  });\n\n  const PointButtons = buttons.map(point => (\n    <Button\n      key={point}\n      className=\"barAction\"\n      onClick={() => onChangePoint(point)}\n    >\n      {point > 0 ? `+${point}` : point}\n    </Button>\n  ));\n\n  return (\n    <div className=\"appContainer\">\n      <h1>Progress Bars Demo</h1>\n      <h3 style={{ color: 'gray' }}>Author: Dao Nam Tien</h3>\n      <h3 style={{ color: 'gray', marginBottom: '5%' }}>Limit: {limit}</h3>\n      <div className=\"barContainer\">{BarComponents}</div>\n      <div className=\"barActions\">\n        <Select\n          value={currentBarIndex}\n          onChange={onChangeCurrentBar}\n          placeholder=\"Please select\"\n          style={{ marginRight: 10 }}\n          className=\"barAction\"\n        >\n          {barOptions}\n        </Select>\n        {PointButtons}\n      </div>\n    </div>\n  );\n};\n\nconst mapStateToProps = ({\n  bar: { bars, limit, buttons, currentBarIndex },\n}) => ({\n  bars,\n  buttons,\n  currentBarIndex,\n  limit,\n});\n\nexport default connect(mapStateToProps)(ProgressBars);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport 'antd/dist/antd.css';\n\nimport './App.scss';\nimport AppInit from './components/AppInit';\nimport ProgressBars from './components/ProgressBars';\n\nconst App = ({ bars }) => {\n  if (bars.length === 0) return <AppInit />;\n  return <ProgressBars />;\n};\n\nconst mapStateToProps = ({ bar }) => ({\n  bars: bar.bars,\n});\n\nexport default connect(mapStateToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { combineReducers } from '@reduxjs/toolkit';\nimport barReducer from './barSlice';\n\nconst rootReducer = combineReducers({\n  bar: barReducer,\n});\n\nexport default rootReducer;\n","import { configureStore } from '@reduxjs/toolkit';\nimport { ThunkAction } from 'redux-thunk';\nimport rootReducer from './rootReducer';\n\nconst store = configureStore({\n  reducer: rootReducer,\n});\n\nif (process.env.NODE_ENV === 'development' && module.hot) {\n  module.hot.accept('./barSlice', () => {\n    const newRootReducer = require('./barSlice').default;\n    store.replaceReducer(newRootReducer);\n  });\n}\n\nexport type AppDispatch = typeof store.dispatch;\nexport type AppThunk = ThunkAction;\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './redux/store';\n\nconst render = () => {\n  ReactDOM.render(\n    <Provider store={store}>\n      <App />\n    </Provider>,\n    document.getElementById('root'),\n  );\n};\n\nif (process.env.NODE_ENV === 'development' && module.hot) {\n  module.hot.accept(App, render);\n}\n\nrender();\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}